install.packages(leaflet)
require(rgdal)
require(raster)
library(leaflet)
install.packages('leaflet')
install.packages("rgal")
install.packages("raster")
install.packages("dplyr")
install.packages("raster")
install.packages("leaflet")
install.packages("rgal")
install.packages("raster")
install.packages("dplyr")
require(rgdal)
require(raster)
library(leaflet)
library(dplyr)
r <- raster("D:/NASA_develo/ls_16regression3.tif")
require(rgdal)
require(raster)
library(leaflet)
library(dplyr)
r <- raster("D:\NASA_develo\ls_16regression3.tif")
require(rgdal)
require(raster)
library(leaflet)
library(dplyr)
r <- raster("D:/NASA_develo/ls_16regression3.tif")
install.packages(rgdal)
require(raster)
library(leaflet)
library(dplyr)
r <- raster("D:/NASA_develo/ls_16regression3.tif")
install.packages('rgdal')
require(raster)
library(leaflet)
library(dplyr)
r <- raster("D:/NASA_develo/ls_16regression3.tif")
r <-writeRaster(r, "filename", datatype='INT1U', overwrite=TRUE)
#leaflet() %>% addTiles() %>%
# addRasterImage(r,  opacity = 0.8) %>%
# ( title = "Surface temp")
install.packages('rgdal')
require(raster)
library(leaflet)
library(dplyr)
r <- raster("D:/NASA_develo/ls_16regression3.tif")
r <-writeRaster(r, "filename", datatype='INT1U', overwrite=TRUE)
leaflet() %>% addTiles() %>%
addRasterImage(r,  opacity = 0.8) %>%
( title = "Surface temp")
install.packages("rgdal")
#this include parameter set to false ensures that the code in this section is not shown in the final product.
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
# installs packages that are not installed yet and loads all packages needed
pacman::p_load(raster, shapefiles, sp, rgdal, randomForest, caret, e1071,
MASS, ROCR, corrplot, rfUtilities, VSURF, rmarkdown)
# this is your working directory, it shows where all the files will be stored
wd <-getwd()
print(wd)
# installs packages that are not installed yet and loads all packages needed
pacman::p_load(raster, shapefiles, sp, rgdal, randomForest, caret, e1071,
MASS, ROCR, corrplot, rfUtilities, VSURF, rmarkdown)
# this is your working directory, it shows where all the files will be stored
wd <-getwd()
print(wd)
library(rgdal)
# installs packages that are not installed yet and loads all packages needed
pacman::p_load(raster, shapefiles, sp, rgdal, randomForest, caret, e1071,
MASS, ROCR, corrplot, rfUtilities, VSURF, rmarkdown)
# this is your working directory, it shows where all the files will be stored
wd <-getwd()
print(wd)
install.packages(rgdal)
library(rgdal)
# installs packages that are not installed yet and loads all packages needed
pacman::p_load(raster, shapefiles, sp, rgdal, randomForest, caret, e1071,
MASS, ROCR, corrplot, rfUtilities, VSURF, rmarkdown)
# this is your working directory, it shows where all the files will be stored
wd <-getwd()
print(wd)
install.packages(https://cran.rstudio.com/bin/windows/contrib/3.3/rgdal_1.2-8.zip)
# installs packages that are not installed yet and loads all packages needed
pacman::p_load(raster, shapefiles, sp, rgdal, randomForest, caret, e1071,
MASS, ROCR, corrplot, rfUtilities, VSURF, rmarkdown)
# this is your working directory, it shows where all the files will be stored
wd <-getwd()
print(wd)
install.packages('https://cran.rstudio.com/bin/windows/contrib/3.3/rgdal_1.2-8.zip')
library(rgdal)
set.seed(123)
library(readr)
pacman::p_load(raster, shapefiles, sp, rgdal, randomForest, caret, e1071, MASS, ROCR, corrplot, rfUtilities, VSURF,dplyr)
set.seed(123)
library(readr)
install.packages(readr)
library(readr)
data <- read_csv("C:\\Users\\danie\\Downloads\\Field_2006_LS5.csv")
install.packages('readr')
library(readr)
data <- read_csv("C:\\Users\\danie\\Downloads\\Field_2006_LS5.csv")
str(data)
data$ro_pa <- as.factor(data$Class)  #for 2006 NAIP and field points
colnames(data)
data <- data[complete.cases(data),]
rastercolumns <- data[,5:204]  #for Field_2006_LS5 points
vsurf1 <- VSURF(x=rastercolumns, y = data$ro_pa, nmin = 10)
select_var <- rastercolumns[,vsurf1$varselect.pred]
correlation <-cor(select_var, method="pearson")
corrplot(correlation,method="number")
select_var
x1 <- readline("Enter the numbers into the console
that you would like to remove, seperated by commas - e.g. 4,25,3")
x1 <- as.numeric(unlist(strsplit(x1, ",")))
x1
select_var1 <- select_var[,-c(x1)]
correlation <-cor(select_var1, method="pearson")
corrplot(correlation,method="number")
x2 <- readline("Enter the numbers that you would like to remove seperated by commas. eg (4,25,3).")
x2 <- as.numeric(unlist(strsplit(x2, ",")))
select_var2 <- select_var1[,-c(x2)]
correlation <-cor(select_var2, method="pearson")
corrplot(correlation,method="number")
x3 <- readline("Enter the numbers that you would like to remove seperated by commas. eg (4,25,3).")
x3 <- readline("Enter the numbers that you would like to remove seperated by commas. eg (4,25,3).")
x3 <- as.numeric(unlist(strsplit(x3, ",")))
select_var3 <- select_var2[,-c(x3)]
correlation <-cor(select_var3, method="pearson")
corrplot(correlation,method="number")
selected_binary <- cbind(ro_pa = data$ro_pa,  select_var1)
selected_binary$names
names(selected_binary)
selected_binary <- cbind(ro_pa = data$ro_pa,  select_var3)
selected_binary <- cbind(ro_pa = data$ro_pa,  select_var3)
names(selected_binary)
predictors <- c('X_20060820_blue', '_20050716_evi', '_20051020_green','_20060820_evi')
df.2 <- data[, which(names(data) %in%predictors)]
dataset <- cbind(response_var = data$ro_pa, df.2)
response_var <- data$ro_pa
rf_modelBI = randomForest(x = df.2, y = data$ro_pa, importance = TRUE, ntree = 2000, mtry = 3)
rf_modelBI
predicted <- predict(rf_modelBI)
observed <- as.factor(data$ro_pa)
aos <- accuracy(x=predicted, y=observed)
aos   # Lists output from the aos function
update.packages()
y
install.packages('digest')
install.packages("digest")
install.packages('stringi')
install.packages("tinytex")
# this is your working directory, it shows where all the files will be stored
setwd('D:\\projects\\fortCollinDev\\testdocs\\part5')
# import the csv as a data frame
data <- read.csv('testData1.csv')
# get an idea of the size of the data frame
rows <- nrow(data)
columns <- ncol(data)
print(paste("This data frame consists of ",rows," rows and ",columns," columns."))
#import Rf utilitties
install.packages("rfUtilities", "randomForest")
library(rfUtilities)
# Set random seed
set.seed(123)
# Create a new data frame with only the raster data
rastercolumns <- data[, 10:135]
#Run the rf utilities fuction to rank the variable in order of importance
varimportance_cov <- rf.modelSel(rastercolumns, data$Percent_Cov, imp.scale="se")
#create a dataframe with the rownames(predictor names) and thier relative importance
#this willproduce one column of variable names and one column of values
varimportance_cov <- cbind(rownames(varimportance_cov$sel.importance), varimportance_cov$sel.importance)
# Delete the row names because we've tied them to our dataframe already
rownames(varimportance_cov) <- NULL
# define the column names for indexing later
colnames(varimportance_cov) <- c("name", "importance")
# create a new dataframe where the mostimportant variable is listed at the top
varimportance_cov_ord <- varimportance_cov[order(-varimportance_cov$imp),]
# take a look at the top 15 predictor variables
print(varimportance_cov_ord[1:15,])
#Run the rf utilities fuction to rank the variable in order of importance
varimportance_cov <- rf.modelSel(rastercolumns, data$Percent_Cov)
#create a dataframe with the rownames(predictor names) and thier relative importance
#this willproduce one column of variable names and one column of values
varimportance_cov <- cbind(rownames(varimportance_cov$sel.importance), varimportance_cov$sel.importance)
# Delete the row names because we've tied them to our dataframe already
rownames(varimportance_cov) <- NULL
# define the column names for indexing later
colnames(varimportance_cov) <- c("name", "importance")
# create a new dataframe where the mostimportant variable is listed at the top
varimportance_cov_ord <- varimportance_cov[order(-varimportance_cov$imp),]
# take a look at the top 15 predictor variables
print(varimportance_cov_ord[1:15,])
# Set random seed
set.seed(123)
# Create a new data frame with only the raster data
rastercolumns <- data[, 10:135]
#Run the rf utilities fuction to rank the variable in order of importance
varimportance_cov <- rf.modelSel(rastercolumns, data$Percent_Cov)
#create a dataframe with the rownames(predictor names) and thier relative importance
#this willproduce one column of variable names and one column of values
varimportance_cov <- cbind(rownames(varimportance_cov$sel.importance), varimportance_cov$sel.importance)
# Delete the row names because we've tied them to our dataframe already
rownames(varimportance_cov) <- NULL
# define the column names for indexing later
colnames(varimportance_cov) <- c("name", "importance")
# create a new dataframe where the mostimportant variable is listed at the top
varimportance_cov_ord <- varimportance_cov[order(-varimportance_cov$imp),]
# take a look at the top 15 predictor variables
print(varimportance_cov_ord[1:15,])
# Create a new data frame with only the raster data
rastercolumns <- data[, 10:135]
#Run the rf utilities fuction to rank the variable in order of importance
varimportance_cov <- rf.modelSel(rastercolumns, data$Percent_Cov, imp.scale = 'se')
#create a dataframe with the rownames(predictor names) and thier relative importance
#this willproduce one column of variable names and one column of values
varimportance_cov <- cbind(rownames(varimportance_cov$sel.importance), varimportance_cov$sel.importance)
# Delete the row names because we've tied them to our dataframe already
rownames(varimportance_cov) <- NULL
# define the column names for indexing later
colnames(varimportance_cov) <- c("name", "importance")
# create a new dataframe where the mostimportant variable is listed at the top
varimportance_cov_ord <- varimportance_cov[order(-varimportance_cov$imp),]
# take a look at the top 15 predictor variables
print(varimportance_cov_ord[1:15,])
varimportance_cov$importance
install.packages('corrplot')
library(corrplot)
# drop columns that are not as important based on rfmodelsel
raster_cov_names <- varimportance_cov_ord$name[1:10]
#select the predictor variables from the oringinal data set the correspond to the
# top ten predictors from our variable selection
rastercolumns_cov <- data[,as.character(raster_cov_names)]
# Calculate correlation coefficient matrix
correlation <-cor(rastercolumns_cov, method="pearson")
# Plot the correlation. The darker the number,
# the more correlated the two variables
corrplot(correlation,method="number")
plot.new(); dev.off()
# Plot the correlation. The darker the number,
# the more correlated the two variables
corrplot(correlation, method="number")
# We're using indexing to remove the rows that correspond to the correlated predictor variables
rastercolumns_cov2 <- rastercolumns[,as.character(raster_cov_names)[-c(5,9,10,6,7)]]
# Calculate correlation coefficient matrix
correlation2 <-cor(rastercolumns_cov2, method="pearson")
# Plot the correlation. The darker the number, the more correlated the two
# variables
corrplot(correlation2, method="number")
#create a new dataframe with the presence absence value (named species_PA) and
# the final predictors that you will using going forward in the modeling process
selected_binary <- cbind(species_cov = data$Percent_Cov,  rastercolumns_cov2)
selected_binary
# this is your working directory, it shows where all the files will be stored
wd <-getwd()
print(wd)
# this is your working directory, it shows where all the files will be stored
setwd("D:\\projects\\fortCollinDev\\testdocs\\part6")
# read inCSV file and save as an object
data <- read.csv("runRF.csv")
#print column name to identify the response and predictor variables
colnames(data)
head(data)
#redefine the response variable data type to factor and save it as a new dataframe
responseVar <- as.factor(data$PresenceAb)
#create a new df with all the predictorvariables
predictorVariables <- data[,9:12]
library(randomForest)
set.seed(123)
rf_modelBI = randomForest(x = predictorVariables, y = responseVar, ntree = 2000, mtry = 2)
library(rfUtilities)
#print the model data
rf_modelBI
#run the predict function on the rf_modelBI variable defined above
predicted <- predict(rf_modelBI)
#define the observed variable
observed <- as.factor(responseVar)
#run the accuracy function
aos <- accuracy(x=predicted, y=predicted)
aos
#run the accuracy function
aos <- accuracy(x=predicted, y=observed)
aos
#run the accuracy function
aos <- accuracy(x=observed, y=predicted)
aos
# define the response variable
responce_var <- data$Percent_Cov
# define the predictor variables
predictor_var <- predictorVariables
# combine the two to a single data frame
dataset <- cbind(responce_var, predictor_var)
# run the random forest model where the response variable is being predicted # by all other variables within the data frame "dataset"
rf_model1 = randomForest(responce_var ~ ., data = dataset, importance = TRUE)
# print the results of the rf model.
rf_model1
install.packages("raster")
library(raster)
#import the relative path to the images. Name them something that makes sense
blue=raster("blue.tif")
green=raster("green.tif")
red=raster("red.tif")
nir=raster("nir.tif")
# Stack the objects into one dataframe
stack_4band=stack(blue,green,red,nir)
# Add header names - these neames need to match your column names on your predictor variables
names(predictorVariables)
names(stack_4band)=c('blue', 'green', 'red', 'nir')
#####################################################map it, BINARY FIRST, then CONTINUOUS###################################
predict(stack_4band, rf_modelBI, filename="modeloutput.tif",fun=predict,format="GTiff",datatype="INT1S",overwrite=TRUE )
output <- raster("modeloutput.tif")
plot(output)
stack_4band
rf_modelBI
rf_modelBI$predicted
#####################################################map it, BINARY FIRST, then CONTINUOUS###################################
predict(stack_4band, rf_modelBI, filename="modeloutput.tif",fun=predict,overwrite=TRUE,na.rm =TRUE)
output <- raster("modeloutput.tif")
plot(output)
