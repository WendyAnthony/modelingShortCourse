# Calculate correlation coefficient matrix
correlation <-cor(rastercolumns_cov, method="pearson")
# Plot the correlation. The darker the number,
# the more correlated the two variables
corrplot(correlation,method="number")
# We're using indexing to remove the rows that correspond to the correlated predictor variables
rastercolumns_cov2 <- rastercolumns[,as.character(raster_cov_names)[-c(5,9,10,6,7)]]
# Calculate correlation coefficient matrix
correlation2 <-cor(rastercolumns_cov2, method="pearson")
# Plot the correlation. The darker the number, the more correlated the two
# variables
corrplot(correlation2, method="number")
#create a new dataframe with the presence absence value (named species_PA) and
# the final predictors that you will using going forward in the modeling process
selected_binary <- cbind(species_cov = data$Percent_Cov,  rastercolumns_cov2)
rastercolumns_cov <- data[,as.character(raster_cov_names)]
# Calculate correlation coefficient matrix
correlation <-cor(rastercolumns_cov, method="pearson")
# Plot the correlation. The darker the number,
# the more correlated the two variables
corrplot(correlation,method="number")
# the read line funtion will show up in your code editors console. You will have to type the numbers in there following the specific format defined below.
x1 <- readline("Enter the numbers that you would like to remove seperated by commas. eg (4,25,3)")
x1 <- as.numeric(unlist(strsplit(x1, ",")))
select_var1 <- select_var[,-c(x1)]
rastercolumns_cov <- data[,as.character(raster_cov_names)]
# Calculate correlation coefficient matrix
correlation <-cor(rastercolumns_cov, method="pearson")
# Plot the correlation. The darker the number,
# the more correlated the two variables
corrplot(correlation,method="number")
# the read line funtion will show up in your code editors console. You will have to type the numbers in there following the specific format defined below.
x1 <- readline("Enter the numbers that you would like to remove seperated by commas. eg (4,25,3)")
x1 <- as.numeric(unlist(strsplit(x1, ",")))
select_var1 <- rastercolumns_cov[,-c(x1)]
rastercolumns_cov <- data[,as.character(raster_cov_names)]
# Calculate correlation coefficient matrix
correlation <-cor(rastercolumns_cov, method="pearson")
# Plot the correlation. The darker the number,
# the more correlated the two variables
corrplot(correlation,method="number")
# the read line funtion will show up in your code editors console. You will have to type the numbers in there following the specific format defined below.
x1 <- readline("Enter the numbers that you would like to remove seperated by commas. eg (4,25,3)")
x1 <- as.numeric(unlist(strsplit(x1, ",")))
select_var1 <- rastercolumns_cov[,-c(x1)]
rastercolumns_cov <- data[,as.character(raster_cov_names)]
# Calculate correlation coefficient matrix
correlation <-cor(rastercolumns_cov, method="pearson")
# Plot the correlation. The darker the number,
# the more correlated the two variables
corrplot(correlation,method="number")
# the read line funtion will show up in your code editors console. You will have to type the numbers in there following the specific format defined below.
x1 <- readline("Enter the numbers that you would like to remove seperated by commas. eg (4,25,3)")
x1 <- as.numeric(unlist(strsplit(x1, ",")))
select_var1 <- rastercolumns_cov[,-c(x1)]
rastercolumns_cov <- data[,as.character(raster_cov_names)]
# Calculate correlation coefficient matrix
correlation <-cor(rastercolumns_cov, method="pearson")
# Plot the correlation. The darker the number,
# the more correlated the two variables
corrplot(correlation,method="number")
# the read line funtion will show up in your code editors console. You will have to type the numbers in there following the specific format defined below.
x1 <- readline("Enter the numbers that you would like to remove seperated by commas. eg (4,25,3)")
x1 <- as.numeric(unlist(strsplit(x1, ",")))
select_var1 <- corrplot[,-c(x1)]
rastercolumns_cov <- data[,as.character(raster_cov_names)]
# Calculate correlation coefficient matrix
correlation <-cor(rastercolumns_cov, method="pearson")
# Plot the correlation. The darker the number,
# the more correlated the two variables
corrplot(correlation,method="number")
# the read line funtion will show up in your code editors console. You will have to type the numbers in there following the specific format defined below.
x1 <- readline("Enter the numbers that you would like to remove seperated by commas. eg (4,25,3)")
x1 <- as.numeric(unlist(strsplit(x1, ",")))
select_var1 <- rastercolumns_cov[,-c(x1)]
rastercolumns
rastercolumns_cov
rastercolumns_cov <- data[,as.character(raster_cov_names)]
# Calculate correlation coefficient matrix
correlation <-cor(rastercolumns_cov, method="pearson")
# Plot the correlation. The darker the number,
# the more correlated the two variables
corrplot(correlation,method="number")
# the read line funtion will show up in your code editors console. You will have to type the numbers in there following the specific format defined below.
x1 <- readline("Enter the numbers that you would like to remove seperated by commas. eg (4,25,3)")
x1 <- as.numeric(unlist(strsplit(x1, ",")))
select_var1 <- rastercolumns_cov[,-c(x1)]
correlation <-cor(select_var1, method="pearson")
corrplot(correlation,method="number")
x2 <- readline("Enter the numbers that you would like to remove seperated by commas. eg (4,25,3).")
x2 <- as.numeric(unlist(strsplit(x2, ",")))
select_var2 <- select_var1[,-c(x2)]
correlation <-cor(select_var2, method="pearson")
corrplot(correlation,method="number")
#If you do not need to remove values at this point just alter your code at the
# bottom to only include the selected variables you want.
### examples
#  selected_binary <- cbind(species_PA = Data$PresenceAb,  select_var1)
#  selected_binary <- cbind(species_PA = Data$PresenceAb,  select_var2)
#  selected_binary <- cbind(species_PA = Data$PresenceAb,  select_var3)
###
# Likewise you can add more steps to this process by repeating this process
x3 <- readline("Enter the numbers that you would like to remove seperated by commas. eg (4,25,3).")
x3 <- as.numeric(unlist(strsplit(x3, ",")))
select_var3 <- select_var2[,-c(x3)]
correlation <-cor(select_var3, method="pearson")
corrplot(correlation,method="number")
#at this point there are 8 variables that are not correlated binded them to the binary indence and put into rf model
selected_binary <- cbind(species_PA = Data$Percent_Cov,  select_var1)
rastercolumns_cov <- data[,as.character(raster_cov_names)]
# Calculate correlation coefficient matrix
correlation <-cor(rastercolumns_cov, method="pearson")
# Plot the correlation. The darker the number,
# the more correlated the two variables
corrplot(correlation,method="number")
# the read line funtion will show up in your code editors console. You will have to type the numbers in there following the specific format defined below.
x1 <- readline("Enter the numbers that you would like to remove seperated by commas. eg (4,25,3)")
x1 <- as.numeric(unlist(strsplit(x1, ",")))
select_var1 <- rastercolumns_cov[,-c(x1)]
correlation <-cor(select_var1, method="pearson")
corrplot(correlation,method="number")
x2 <- readline("Enter the numbers that you would like to remove seperated by commas. eg (4,25,3).")
x2 <- as.numeric(unlist(strsplit(x2, ",")))
select_var2 <- select_var1[,-c(x2)]
correlation <-cor(select_var2, method="pearson")
corrplot(correlation,method="number")
#If you do not need to remove values at this point just alter your code at the
# bottom to only include the selected variables you want.
### examples
#  selected_binary <- cbind(species_PA = Data$PresenceAb,  select_var1)
#  selected_binary <- cbind(species_PA = Data$PresenceAb,  select_var2)
#  selected_binary <- cbind(species_PA = Data$PresenceAb,  select_var3)
###
# Likewise you can add more steps to this process by repeating this process
x3 <- readline("Enter the numbers that you would like to remove seperated by commas. eg (4,25,3).")
x3 <- as.numeric(unlist(strsplit(x3, ",")))
select_var3 <- select_var2[,-c(x3)]
correlation <-cor(select_var3, method="pearson")
corrplot(correlation,method="number")
#at this point there are 8 variables that are not correlated binded them to the binary indence and put into rf model
selected_binary <- cbind(species_PA = data$Percent_Cov,  select_var1)
selected_binary
#this include parameter set to false ensures that the code in this section is not shown in the final product.
knitr::opts_chunk$set(echo = TRUE)
# read inCSV file and save as an object
data <- read.csv("runRF.csv")
#print column name to identify the response and predictor variables
colnames(data)
head(data)
#redefine the response variable data type to factor and save it as a new dataframe
responseVar <- as.factor(data$PresenceAb)
#create a new df with all the predictorvariables
predictorVariables <- data[,8:11]
set.seed(123)
rf_modelBI = randomForest(x = predictorVariables, y = responseVar, ntree = 2000, mtry = 2)
install.packages("randomForest")
library(randomForest)
set.seed(123)
rf_modelBI = randomForest(x = predictorVariables, y = responseVar, ntree = 2000, mtry = 2)
install.packages("randomForest")
#this include parameter set to false ensures that the code in this section is not shown in the final product.
knitr::opts_chunk$set(echo = TRUE)
install.packages("randomForest")
library(randomForest)
set.seed(123)
rf_modelBI = randomForest(x = predictorVariables, y = responseVar, ntree = 2000, mtry = 2)
#print the model data
rf_modelBI
#run the predict function on the rf_modelBI variable defined above
predicted <- predict(rf_modelBI)
#define the observed variable
observed <- responseVar
#run the accuracy function
aos <- accuracy(x=predicted, y=observed)
install.packages('forecast', dependencies = TRUE)
#print the model data
rf_modelBI
#run the predict function on the rf_modelBI variable defined above
predicted <- predict(rf_modelBI)
#define the observed variable
observed <- responseVar
#run the accuracy function
aos <- accuracy(x=predicted, y=observed)
install.packages('forecast', dependencies = TRUE)
library(forecast)
#print the model data
rf_modelBI
#run the predict function on the rf_modelBI variable defined above
predicted <- predict(rf_modelBI)
#define the observed variable
observed <- responseVar
#run the accuracy function
aos <- accuracy(x=predicted, y=observed)
aos
#run the accuracy function
aos <- accuracy(x=predicted)
#run the accuracy function
aos <- accuracy(f= predicted, x=observed)
#run the accuracy function
aos <- accuracy(predicted, x=observed)
#run the accuracy function
aos <- accuracy(predicted)
#run the accuracy function
aos <- accuracy(observed, predicted)
#run the accuracy function
aos <- accuracy(x=observed, y=predicted)
#run the accuracy function
aos <- accuracy(observed,predicted)
#print the model data
rf_modelBI
#run the predict function on the rf_modelBI variable defined above
predicted <- forecast(rf_modelBI)
#print the model data
rf_modelBI
#run the predict function on the rf_modelBI variable defined above
predicted <- predict(rf_modelBI)
#define the observed variable
observed <- responseVar
#run the accuracy function
aos <- accuracy(observed,predicted)
#run the accuracy function
aos <- accuracy(predicted, observed)
#run the accuracy function
aos <- accuracy(observed)
#run the accuracy function
aos <- accuracy(observed, predicted)
print predicted
print(predicted)
print(observed)
#define the observed variable
observed <- as.factor(responseVar)
#run the accuracy function
aos <- accuracy(observed, predicted)
#run the accuracy function
aos <- accuracy(f+observed, predicted)
#run the accuracy function
aos <- accuracy(forecast(observed), predicted)
#run the accuracy function
aos <- accuracy(forecast(rf_modelBI), predicted)
#run the accuracy function
aos <- accuracy(forecast(predict(rf_modelBI)), predicted)
#run the accuracy function
aos <- accuracy(forecast(predicted), predicted)
#run the accuracy function
aos <- accuracy(predicted, predicted)
#run the accuracy function
aos <- accuracy(x=predicted, predicted)
#run the accuracy function
aos <- accuracy(x=predicted, y=predicted)
predicted <- predict(rf_modelBI)
observed <- data$responseVar
aos <- accuracy(x=predicted, y=observed)
aos
class(predicted)
predicted <- as.numeric(predict(rf_modelBI))
observed <- data$responseVar
aos <- accuracy(x=predicted, y=observed)
aos <- accuracy(predicted, y=observed)
aos <- accuracy(predicted, observed)
aos
#print column name to identify the response and predictor variables
colnames(data)
#create a new df with all the predictorvariables
predictorVariables <- data[,8:11]
#redefine the response variable data type to factor and save it as a new dataframe
responseVar <- as.factor(data$PresenceAb)
# read inCSV file and save as an object
data <- read.csv("runRF.csv")
#print column name to identify the response and predictor variables
colnames(data)
head(data)
#redefine the response variable data type to factor and save it as a new dataframe
responseVar <- as.factor(data$PresenceAb)
#create a new df with all the predictorvariables
predictorVariables <- data[,8:11]
install.packages("randomForest")
library(randomForest)
set.seed(123)
rf_modelBI = randomForest(x = predictorVariables, y = responseVar, ntree = 2000, mtry = 2)
install.packages("randomForest")
#this include parameter set to false ensures that the code in this section is not shown in the final product.
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
#print the model data
rf_modelBI
install.packages("randomForest")
library(randomForest)
set.seed(123)
rf_modelBI = randomForest(x = predictorVariables, y = responseVar, ntree = 2000, mtry = 2)
rf_modelBI = randomForest(x = predictorVariables, y = responseVar, ntree = 2000, mtry = 2)
set.seed(123)
rf_modelBI = randomForest(x = predictorVariables, y = responseVar, ntree = 2000, mtry = 2)
#print the model data
rf_modelBI
#run the predict function on the rf_modelBI variable defined above
predicted <- predict(rf_modelBI)
#define the observed variable
observed <- as.factor(responseVar)
#run the accuracy function
aos <- accuracy(x=predicted, y=predicted)
install.packages("raster")
library(raster)
#run the accuracy function
aos <- accuracy(x=predicted, y=predicted)
install.packages("rgdal")
install.packages("rgdal")
library(rgdal)
aos <- accuracy(x=predicted, y=predicted)
library(caret)
install.packages("caret")
install.packages("caret")
library(caret)
aos <- accuracy(x=predicted, y=predicted)
install.packages("ROCR")
library(ROCR)
aos <- accuracy(x=predicted, y=predicted)
install.packages("MASS")
install.packages("MASS")
#this include parameter set to false ensures that the code in this section is not shown in the final product.
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
library(MASS)
aos <- accuracy(x=predicted, y=predicted)
install.packages("e1071")
library(e1071)
aos <- accuracy(x=predicted, y=predicted)
# installs packages that are not installed yet and loads all packages needed
pacman::p_load(raster, shapefiles, sp, rgdal, randomForest, caret, e1071,
MASS, ROCR, corrplot, rfUtilities, VSURF, rmarkdown)
# installs packages that are not installed yet and loads all packages needed
install.packages(pacman)
pacman::p_load(raster, shapefiles, sp, rgdal, randomForest, caret, e1071,
MASS, ROCR, corrplot, rfUtilities, VSURF, rmarkdown)
# installs packages that are not installed yet and loads all packages needed
install.packages("pacman"")
# installs packages that are not installed yet and loads all packages needed
install.packages("pacman")
# installs packages that are not installed yet and loads all packages needed
install.packages("pacman")
aos <- accuracy(x=predicted, y=predicted)
pacman::p_load(raster, shapefiles, sp, rgdal, randomForest, caret, e1071,
MASS, ROCR, corrplot, rfUtilities, VSURF, rmarkdown)
aos <- accuracy(x=predicted, y=predicted)
aos
install.packages("VSURF")
install.packages("VSURF")
library(VSURF)
#this include parameter set to false ensures that the code in this section is not shown in the final product.
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
# this is your working directory, it shows where all the files will be stored
wd <-getwd()
print(wd)
# read inCSV file and save as an object
data <- read.csv("runRF.csv")
#print column name to identify the response and predictor variables
colnames(data)
head(data)
#redefine the response variable data type to factor and save it as a new dataframe
responseVar <- as.factor(data$PresenceAb)
#create a new df with all the predictorvariables
predictorVariables <- data[,8:11]
install.packages("randomForest")
library(randomForest)
install.packages("randomForest")
set.seed(123)
rf_modelBI = randomForest(x = predictorVariables, y = responseVar, ntree = 2000, mtry = 2)
#this include parameter set to false ensures that the code in this section is not shown in the final product.
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
set.seed(123)
rf_modelBI = randomForest(x = predictorVariables, y = responseVar, ntree = 2000, mtry = 2)
install.packages("randomForest")
library(randomForest)
set.seed(123)
rf_modelBI = randomForest(x = predictorVariables, y = responseVar, ntree = 2000, mtry = 2)
#print the model data
rf_modelBI
#run the predict function on the rf_modelBI variable defined above
predicted <- predict(rf_modelBI)
#define the observed variable
observed <- as.factor(responseVar)
#run the accuracy function
aos <- accuracy(x=predicted, y=predicted)
# installs packages that are not installed yet and loads all packages needed
install.packages("pacman")
aos <- accuracy(x=predicted, y=predicted)
library(rfUtilities)
#print the model data
rf_modelBI
#run the predict function on the rf_modelBI variable defined above
predicted <- predict(rf_modelBI)
#define the observed variable
observed <- as.factor(responseVar)
#run the accuracy function
aos <- accuracy(x=predicted, y=predicted)
aos
# define the response variable
responce_var <- data$Percent_Cov
# define the predictor variables
predictor_var <- rastercolumns_cov2
# define the response variable
responce_var <- data$Percent_Cov
# define the predictor variables
predictor_var <- predictorVariables
# combine the two to a single data frame
dataset <- cbind(responce_var, predictor_var)
# run the random forest model where the response variable is being predicted # by all other variables within the data frame "dataset"
rf_model1 = randomForest(responce_var ~ ., data = dataset, importance = TRUE)
# print the results of the rf model.
rf_model1
names(predictorVariables)
#create a new df with all the predictorvariables
predictorVariables <- data[,9:12]
names(predictorVariables)
#this include parameter set to false ensures that the code in this section is not shown in the final product.
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
# this is your working directory, it shows where all the files will be stored
wd <-getwd()
print(wd)
# read inCSV file and save as an object
data <- read.csv("runRF.csv")
#print column name to identify the response and predictor variables
colnames(data)
head(data)
#redefine the response variable data type to factor and save it as a new dataframe
responseVar <- as.factor(data$PresenceAb)
#create a new df with all the predictorvariables
predictorVariables <- data[,9:12]
install.packages("randomForest")
library(randomForest)
install.packages("randomForest")
set.seed(123)
rf_modelBI = randomForest(x = predictorVariables, y = responseVar, ntree = 2000, mtry = 2)
#this include parameter set to false ensures that the code in this section is not shown in the final product.
knitr::opts_chunk$set(echo = TRUE)
library(rmarkdown)
set.seed(123)
rf_modelBI = randomForest(x = predictorVariables, y = responseVar, ntree = 2000, mtry = 2)
library(randomForest)
set.seed(123)
rf_modelBI = randomForest(x = predictorVariables, y = responseVar, ntree = 2000, mtry = 2)
library(rfUtilities)
#print the model data
rf_modelBI
#run the predict function on the rf_modelBI variable defined above
predicted <- predict(rf_modelBI)
#define the observed variable
observed <- as.factor(responseVar)
#run the accuracy function
aos <- accuracy(x=predicted, y=predicted)
aos
blue=raster("blue,tif")
install.packages("raster")
library(raster)
install.packages("raster")
library(raster)
blue=raster("blue,tif")
blue=raster("//blue,tif")
getWD()
getwd()
source
source()
source(file)
source
source(ofile)
source(offile)
source
source(runRandomForest.rmd)
source('runRandomForest.rmd')
sourec.ofile
sourec.ofile()
source.ofile
source.ofile()
this.dir <- dirname(parent.frame(2)$ofile) # frame(3) also works.
setwd(this.dir)
this.dir <- dirname(parent.frame(2)$ofile)
this.dir <- dirname(parent.frame(3)$ofile)
wd
setwd(wd)
getwd()
wd
getwd
get(wd)
getwd()
# this is your working directory, it shows where all the files will be stored
wd <-getwd()
wd
setwd(str(wd))
setwd(getwd)
print(wd)
mw <- setwd(wd)
mv
getwd()
blue=raster("blue,tif")
wd
list.files()
blue=raster("blue.tif")
green=raster("green.tif")
red=raster("red.tif")
nir=raster("nir.tif")
stack_4band=stack(blue,green,red,nir)
names(predictorVariables)
names(stack_4band)=c('blue', 'green', 'red', 'nir')
predict(stack_4band, rf_model, filename="modeloutput.tif",fun=predict,format="GTiff",datatype="INT1U",overwrite=TRUE )
predict(stack_4band, rf_modelBI, filename="modeloutput.tif",fun=predict,format="GTiff",datatype="INT1U",overwrite=TRUE )
output <- raster("modeloutput.tif")
plot(output)
hist(output)
image(output, zlim=c(0,1))
rf_modelBI
