K13genusCWR
K13genusCWR <- K13Data %>%
filter(Type == "CWR") %>%
distinct(Genus) %>%
lapply(toupper)
K13genusCWR
K13genusCWR <- K13Data %>%
filter(Type == "CWR") %>%
distinct(Genus) %>%
lapply(toupper) %>%
as.data.frame()
K13genusCWR
sosCWRgenus <- left_join(sosGeneraCount,K13genusCWR, by="Genus" )
sosCWRgenus
sosCWRgenus <- right_join(sosGeneraCount,K13genusCWR, by="Genus" )
sosCWRgenus
sosCWRgenus <- right_join(sosGeneraCount,K13genusCWR, by="Genus" )%>%
arrange(desc(count))
sosCWRgenus
sosWUSgenus <- right_join(sosGeneraCount,K13genusWUS, by="Genus" )%>%
arrange(desc(count))
sosWUSgenus
K13genusWUS <- K13Data %>%
filter(Type == "WUS") %>%
distinct(Genus) %>%
lapply(toupper) %>%
as.data.frame()
K13genusWUS
sosWUSgenus
sosCWRgenus
wepLocal <- tbl_df(read.csv("H:\\SOS_Project\\analysisData\\Distributions&NativityOfSpeciesWithEconomicUses.csv")) %>%
filter(country_code == 'USA') %>%
separate(name, c('Genus','species'))%>%
distinct(Genus)%>%
lapply(toupper) %>%
as.data.frame()
wepLocalGenus <- tbl_df(read.csv("H:\\SOS_Project\\analysisData\\Distributions&NativityOfSpeciesWithEconomicUses.csv")) %>%
filter(country_code == 'USA') %>%
separate(name, c('Genus','species'))%>%
distinct(Genus)%>%
lapply(toupper) %>%
as.data.frame()
sosWEPgenus <- right_join(sosGeneraCount,wepLocalGenus, by="Genus" )%>%
arrange(desc(count))
sosWEPgenus
sosWUSgenus
sosCWRgenus
top20 <- slice(sosCWRgenus$Genus, 1:20)
sosCWRgenus <- right_join(sosGeneraCount,K13genusCWR, by="Genus" )%>%
arrange(desc(count)) %>%
slice(1:20)
sosCWRgenus
sosCWRgenus <- right_join(sosGeneraCount,K13genusCWR, by="Genus" )%>%
arrange(desc(count)) %>%
slice(1:20) %>%
select(Genus)
sosCWRgenus
sosCWRgenus <- right_join(sosGeneraCount,K13genusCWR, by="Genus" )%>%
arrange(desc(count)) %>%
slice(1:20) %>%
select(Genus) %>%
dplyr::rename(CWR = Genus)
sosCWRgenus
sosCWRgenus <- right_join(sosGeneraCount,K13genusCWR, by="Genus" )%>%
arrange(desc(count)) %>%
slice(1:20) %>%
select(Genus) %>%
dplyr::rename(CWR = Genus)
sosWUSgenus <- right_join(sosGeneraCount,K13genusWUS, by="Genus" )%>%
arrange(desc(count)) %>%
slice(1:20) %>%
select(Genus) %>%
dplyr::rename(WUS = Genus)
sosWEPgenus <- right_join(sosGeneraCount,wepLocalGenus, by="Genus" )%>%
arrange(desc(count)) %>%
slice(1:20) %>%
select(Genus) %>%
dplyr::rename(WEP = Genus)
top20 <- rbind(sosCWRgenus, sosWUSgenus) %>%
rbind(sosWEPgenus)
sosCWRgenus
sosWUSgenus
sosWEPgenus
top20 <- rbind(sosCWRgenus, sosWUSgenus)
top20 <- as.dataframe() %>%
rbind(sosCWRgenus)
top20 <- as.data.frame() %>%
rbind(sosCWRgenus)
top20 <- as.data.frame() %>% rbind(sosCWRgenus)
top20 <- as.data.frame() %>% mutate(CWR = sosCWRgenus)
top20 <-  sosWUSgenus %>% mutate(CWR = sosCWRgenus)
top20
top20
top20 <-  sosWUSgenus %>% mutate(CWR = sosCWRgenus)
sosWEPgenus <- right_join(sosGeneraCount,wepLocalGenus, by="Genus" )%>%
arrange(desc(count)) %>%
slice(1:20) %>%
select(Genus) %>%
dplyr::rename(WEP = Genus) %>%
row.names() <- NULL
sosWEPgenus <- right_join(sosGeneraCount,wepLocalGenus, by="Genus" )%>%
arrange(desc(count)) %>%
slice(1:20) %>%
select(Genus) %>%
dplyr::rename(WEP = Genus) %>%
rownames() <- NULL
sosWEPgenus <- right_join(sosGeneraCount,wepLocalGenus, by="Genus" )%>%
arrange(desc(count)) %>%
slice(1:20) %>%
select(Genus) %>%
dplyr::rename(WEP = Genus) %>%
rownames(NULL)
sosWEPgenus
sosWEPgenus <- right_join(sosGeneraCount,wepLocalGenus, by="Genus" )%>%
arrange(desc(count)) %>%
slice(1:20) %>%
select(Genus) %>%
dplyr::rename(WEP = Genus)
sosWEPgenus
, sosWUSgenus)%>%
rbind(sosWEPgenus,sosWEPgenus)
rbind(sosWEPgenus,sosWEPgenus)
rbind(sosWEPgenus,sosCWRgenus)
sosCWRgenus %>% dplyr::mutate(WUS == sosWUSgenus$WUS)
top20 <-  rbind(sosWUSgenus$WUS, sosCWRgenus$CWR)
top20
top20 <-  cbind(sosWUSgenus$WUS, sosCWRgenus$CWR)
top20
top20 <-  cbind(sosWUSgenus, sosCWRgenus)
top20
top20 <-  cbind(sosWUSgenus, sosCWRgenus, sosWEPgenus)
top20
devtools::install_github("wallaceEcoMod/wallace@maxnet", dependencies = TRUE)
install.packages("installr")
library(installr)
updateR()
library(wallace)
library(wallace)
install.packages("devtools")
devtools::install_github("wallaceEcoMod/wallace")
library(wallace)
run_wallace()
system.file('java', package="dismo")
library(wallace)
wallace::run_wallace()
install.packages("rjava")
install.packages("rJava")
library(rJava)
devtools::install_github("wallaceEcoMod/wallace@maxnet", dependencies = TRUE)
library(wallace)
library()
library(wallace)
wallace::run_wallace()
library(spocc)
library(spThin)
library(dismo)
library(rgeos)
library(ENMeval)
library(dplyr)
source(system.file('shiny/funcs', 'functions.R', package = 'wallace'))
# NOTE: provide the path to the folder that contains the CSV file
d.occs <- ''
# create path to user occurrences csv file
userOccs.path <- file.path(d.occs, "Cucurbita_argyrosperma_subsp._sororia2.csv")
# read in csv
userOccs.csv <- read.csv(userOccs.path, header = TRUE)
userOccs.path <- file.path(d.occs, "H:\\cucurbita\\analysisData\\singleSpeciesCWR\\Cucurbita_argyrosperma_subsp._sororia.csv")
userOccs.csv <- read.csv(userOccs.path, header = TRUE)
userOccs.csv <- read.csv("H:\\cucurbita\\analysisData\\singleSpeciesCWR\\Cucurbita_argyrosperma_subsp._sororia.csv")
occs.dups <- duplicated(userOccs.csv[c('longitude', 'latitude')])
occs <- userOccs.csv[!occs.dups,]
occs <- occs[complete.cases(occs$longitude, occs$latitude), ]
occs$occID <- row.names(occs)
occs <- occs %>% filter(!(occID %in% 42))
envs <- raster::getData(name = "worldclim", var = "bio", res = 10, lat = , lon = )
userOccs.csv <- read.csv("H:\\cucurbita\\analysisData\\singleSpeciesCWR\\Cucurbita_argyrosperma_subsp._sororia.csv")
occs.dups <- duplicated(userOccs.csv[c('longitude', 'latitude')])
occs <- userOccs.csv[!occs.dups,]
occs <- occs[complete.cases(occs$longitude, occs$latitude), ]
occs$occID <- row.names(occs)
occs <- occs %>% filter(!(occID %in% 42))
envRes <- 10
if (envRes == 0.5) {
i <- grep('_', names(envs))
editNames <- sapply(strsplit(names(envs)[i], '_'), function(x) x[1])
names(envs)[i] <- editNames
}
i <- grep('bio[0-9]$', names(envs))
editNames <- paste('bio', sapply(strsplit(names(envs)[i], 'bio'), function(x) x[2]), sep='0')
names(envs)[i] <- editNames
envs <- envs[[c('bio01', 'bio02', 'bio03', 'bio04', 'bio05', 'bio06', 'bio07', 'bio08', 'bio09', 'bio10', 'bio11', 'bio12', 'bio13', 'bio14', 'bio15', 'bio16', 'bio17', 'bio18', 'bio19')]]
locs.vals <- raster::extract(envs[[1]], occs[, c('longitude', 'latitude')])
occs <- occs[!is.na(locs.vals), ]
bgExt <- rgeos::gBuffer(bgExt, width = 0.5)
xmin <- min(occs$longitude)
xmax <- max(occs$longitude)
ymin <- min(occs$latitude)
ymax <- max(occs$latitude)
bb <- matrix(c(xmin, xmin, xmax, xmax, xmin, ymin, ymax, ymax, ymin, ymin), ncol=2)
bgExt <- sp::SpatialPolygons(list(sp::Polygons(list(sp::Polygon(bb)), 1)))
bgExt <- rgeos::gBuffer(bgExt, width = 0.5)
envsBgCrop <- raster::crop(envs, bgExt)
envsBgMsk <- raster::mask(envsBgCrop, bgExt)
bg.xy <- dismo::randomPoints(envsBgMsk, 10000)
bg.xy <- as.data.frame(bg.xy)
group.data <- ENMeval::get.randomkfold(occ=occs.xy, bg.coords=bg.xy, kfolds=4)
occs
glimpse(bg)
occs.xy <- occs[c('longitude', 'latitude')]
occs.xy
group.data <- ENMeval::get.randomkfold(occ=occs.xy, bg.coords=bg.xy, kfolds=4)
occs.grp <- group.data[[1]]
bg.grp <- group.data[[2]]
rms <- seq(1, 2, 1)
e <- ENMeval::ENMevaluate(occs.xy, envsBgMsk, bg.coords = bg.xy, RMvalues = rms, fc = 'L',
method = 'user', occs.grp, bg.grp, clamp = TRUE, algorithm = "maxnet")
evalTbl <- e@results
evalMods <- e@models
names(evalMods) <- e@results$settings
evalPreds <- e@predictions
plot(evalMods[["L_2"]], vars = c('bio02', 'bio03', 'bio04', 'bio08', 'bio09', 'bio11', 'bio12', 'bio15', 'bio16', 'bio17', 'bio18', 'bio19'), type = "cloglog")
ENMeval::eval.plot(evalTbl, value = "avg.test.AUC")
mod <- evalMods[["L_2"]]
pred <- evalPreds[["L_2"]]
plot(pred)
plot(pred)
source(system.file('shiny/funcs', 'functions.R', package = 'wallace'))
# NOTE: provide the path to the folder that contains the CSV file
d.occs <- ''
# create path to user occurrences csv file
userOccs.path <- file.path(d.occs, "H:\\cucurbita\\analysisData\\singleSpeciesCWR\\Cucurbita_argyrosperma_subsp._sororia.csv")
# read in csv
userOccs.csv <- read.csv("H:\\cucurbita\\analysisData\\singleSpeciesCWR\\Cucurbita_argyrosperma_subsp._sororia.csv")
# remove rows with duplicate coordinates
occs.dups <- duplicated(userOccs.csv[c('longitude', 'latitude')])
occs <- userOccs.csv[!occs.dups,]
# remove NAs
occs <- occs[complete.cases(occs$longitude, occs$latitude), ]
# give all records a unique ID
occs$occID <- row.names(occs)
# remove the rows that match the occIDs selected
occs <- occs %>% filter(!(occID %in% 42))
# get WorldClim bioclimatic variable rasters
envs <- raster::getData(name = "worldclim", var = "bio", res = 10, lat = , lon = )
# change names rasters variables
envRes <- 10
if (envRes == 0.5) {
i <- grep('_', names(envs))
editNames <- sapply(strsplit(names(envs)[i], '_'), function(x) x[1])
names(envs)[i] <- editNames
}
i <- grep('bio[0-9]$', names(envs))
editNames <- paste('bio', sapply(strsplit(names(envs)[i], 'bio'), function(x) x[2]), sep='0')
names(envs)[i] <- editNames
# subset by those variables selected
envs <- envs[[c('bio01', 'bio02', 'bio03', 'bio04', 'bio05', 'bio06', 'bio07', 'bio08', 'bio09', 'bio10', 'bio11', 'bio12', 'bio13', 'bio14', 'bio15', 'bio16', 'bio17', 'bio18', 'bio19')]]
# extract environmental values at occ grid cells
locs.vals <- raster::extract(envs[[1]], occs[, c('longitude', 'latitude')])
# remove occs without environmental values
occs <- occs[!is.na(locs.vals), ]
# extract occurrence coordinates
occs.xy <- occs[c('longitude', 'latitude')]
xmin <- min(occs$longitude)
xmax <- max(occs$longitude)
ymin <- min(occs$latitude)
ymax <- max(occs$latitude)
bb <- matrix(c(xmin, xmin, xmax, xmax, xmin, ymin, ymax, ymax, ymin, ymin), ncol=2)
bgExt <- sp::SpatialPolygons(list(sp::Polygons(list(sp::Polygon(bb)), 1)))
bgExt <- rgeos::gBuffer(bgExt, width = 0.5)
# crop the environmental rasters by the background extent shape
envsBgCrop <- raster::crop(envs, bgExt)
# mask the background extent shape from the cropped raster
envsBgMsk <- raster::mask(envsBgCrop, bgExt)
# sample random background points
bg.xy <- dismo::randomPoints(envsBgMsk, 10000)
# convert matrix output to data frame
bg.xy <- as.data.frame(bg.xy)
occs
group.data <- ENMeval::get.randomkfold(occ=occs.xy, bg.coords=bg.xy, kfolds=4)
group.data <- ENMeval::get.randomkfold(occ=occs.xy, bg.coords=bg.xy, kfolds=4)
# pull out the occurrence and background partition group numbers from the list
occs.grp <- group.data[[1]]
bg.grp <- group.data[[2]]
# get WorldClim bioclimatic variable rasters
envs <- raster::getData(name = "worldclim", var = "bio", res = 1, lat = , lon = )
# get WorldClim bioclimatic variable rasters
envs <- raster::getData(name = "worldclim", var = "bio", res = 5, lat = , lon = )
# change names rasters variables
envRes <- 10
if (envRes == 0.5) {
i <- grep('_', names(envs))
editNames <- sapply(strsplit(names(envs)[i], '_'), function(x) x[1])
names(envs)[i] <- editNames
}
i <- grep('bio[0-9]$', names(envs))
editNames <- paste('bio', sapply(strsplit(names(envs)[i], 'bio'), function(x) x[2]), sep='0')
names(envs)[i] <- editNames
# subset by those variables selected
envs <- envs[[c('bio01', 'bio02', 'bio03', 'bio04', 'bio05', 'bio06', 'bio07', 'bio08', 'bio09', 'bio10', 'bio11', 'bio12', 'bio13', 'bio14', 'bio15', 'bio16', 'bio17', 'bio18', 'bio19')]]
# extract environmental values at occ grid cells
locs.vals <- raster::extract(envs[[1]], occs[, c('longitude', 'latitude')])
# remove occs without environmental values
occs <- occs[!is.na(locs.vals), ]
# extract occurrence coordinates
occs.xy <- occs[c('longitude', 'latitude')]
envRes <- 10
if (envRes == 0.5) {
i <- grep('_', names(envs))
editNames <- sapply(strsplit(names(envs)[i], '_'), function(x) x[1])
names(envs)[i] <- editNames
}
i <- grep('bio[0-9]$', names(envs))
editNames <- paste('bio', sapply(strsplit(names(envs)[i], 'bio'), function(x) x[2]), sep='0')
names(envs)[i] <- editNames
envs <- envs[[c('bio01', 'bio02', 'bio03', 'bio04', 'bio05', 'bio06', 'bio07', 'bio08', 'bio09', 'bio10', 'bio11', 'bio12', 'bio13', 'bio14', 'bio15', 'bio16', 'bio17', 'bio18', 'bio19')]]
locs.vals <- raster::extract(envs[[1]], occs[, c('longitude', 'latitude')])
locs.vals <- raster::extract(envs[[1]], occs[, c('longitude', 'latitude')])
occs <- occs[!is.na(locs.vals), ]
occs.xy <- occs[c('longitude', 'latitude')]
xmin <- min(occs$longitude)
xmax <- max(occs$longitude)
ymin <- min(occs$latitude)
ymax <- max(occs$latitude)
bb <- matrix(c(xmin, xmin, xmax, xmax, xmin, ymin, ymax, ymax, ymin, ymin), ncol=2)
bgExt <- sp::SpatialPolygons(list(sp::Polygons(list(sp::Polygon(bb)), 1)))
bgExt <- rgeos::gBuffer(bgExt, width = 0.5)
# crop the environmental rasters by the background extent shape
envsBgCrop <- raster::crop(envs, bgExt)
# mask the background extent shape from the cropped raster
envsBgMsk <- raster::mask(envsBgCrop, bgExt)
# sample random background points
bg.xy <- dismo::randomPoints(envsBgMsk, 10000)
# convert matrix output to data frame
bg.xy <- as.data.frame(bg.xy)
group.data <- ENMeval::get.randomkfold(occ=occs.xy, bg.coords=bg.xy, kfolds=4)
# pull out the occurrence and background partition group numbers from the list
occs.grp <- group.data[[1]]
bg.grp <- group.data[[2]]
e <- ENMeval::ENMevaluate(occs.xy, envsBgMsk, bg.coords = bg.xy, RMvalues = rms, fc = 'L',
method = 'user', occs.grp, bg.grp, clamp = TRUE, algorithm = "maxnet")
evalTbl <- e@results
evalMods <- e@models
names(evalMods) <- e@results$settings
evalPreds <- e@predictions
# view response curves for environmental variables with non-zero coefficients
plot(evalMods[["L_2"]], vars = c('bio02', 'bio03', 'bio04', 'bio08', 'bio09', 'bio11', 'bio12', 'bio15', 'bio16', 'bio17', 'bio18', 'bio19'), type = "cloglog")
# view ENMeval results
ENMeval::eval.plot(evalTbl, value = "avg.test.AUC")
# Select your model from the models list
mod <- evalMods[["L_2"]]
# generate raw prediction
pred <- evalPreds[["L_2"]]
# plot the model prediction
plot(pred)
evalMods$L_1
evalMods[1]
plot(evalMods[["L_2"]], vars = c('bio02', 'bio03', 'bio04', 'bio08', 'bio09', 'bio11', 'bio12', 'bio15', 'bio16', 'bio17', 'bio18', 'bio19'), type = "cloglog")
e@results
#import all necessary libraries
#install.packages("dplyr", "lemon", "ggplot2", "plyr",'tidyr' #Keep this commented out to knit: look into how to get around this.
#if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
#install.pandoc()
#install.packages('knitr')
#install.packages("bookdown")
if (!require('dplyr')) install.packages('dplyr')
if (!require('ggplot2')) install.packages('ggplot2')
if (!require('plyr')) install.packages('plyr')
if (!require('tidyr')) install.packages('tidyr')
library(dplyr)
#library(lemon)
library(ggplot2)
library(plyr)
library(tidyr)
#install.packages('devtools')
#library(devtools)
#install_version("rmarkdown",version=1.8)
e@algorithm
e@partition.method
e@occ.grp
read.csv("C:\\Users\\Daniel.Carver\\Downloads\\c_palmataToCSV.csv")
glimpse(palma)
glimpse(palma)
library(dplyr)
glimpse(palma)
palma <- read.csv("C:\\Users\\Daniel.Carver\\Downloads\\c_palmataToCSV.csv")
glimpse(palma)
View(palma)
wholePalma <- read.csv("H:\\cucurbita\\analysisData\\singleSpeciesCWR\\Cucurbita_palmata.csv")
View(wholePalma
)
wholePalma$longitude <- abs(wholePalma$longitude) *-1
distinct(sign(wholePalma$longitude)
distinct(sign(wholePalma$longitude))
distinct(sign(wholePalma$longitude))
dplyr::distinct(sign(wholePalma$longitude))
sign(wholePalma$longitude)
names(wholePalma)
names(palma)
dist.rec <- palma %>%
filter(!is.na(ns1.name6)) %>%
distinct(ns1.name6)
dist.rec
names(dist.rec)
View(dist.rec)
allNegLong <- wholePalma %>%
filter(record_identifier %in% dist.rec$ns1.name6)
dim(allNegLong)
dim(wholePalma)
write.csv(allNegLong, file = paste("analysisData\\Cucurbita_palmata.csv", sep = ""))
setwd("H:\\cucurbita")
write.csv(allNegLong, file = paste("analysisData\\Cucurbita_palmata.csv", sep = ""))
library(rgeos)
library(dplyr)
setwd("H:\\fortCollinDev\\modelingShortCourse\\testdocs")
dir()
dir("part6")
dir("part6") %>%
ends_with("tif")
as.data.frame(dir("part6")) %>%
ends_with("tif")
as.data.frame(dir("part6")) %>%
ends_with(".tif")
as.data.frame(dir("part6"))
dir("part6")) %>%
select.list('.tif')
rastersPath <- grep(".tif", dir("part6"))
rastersPath
rastersPath <- grep(".tif", dir("part6"), fixed =TRUE)
rastersPath
rastersPath <- grep(".tif", dir("part6"), value =TRUE)
rastersPath
rastersPath <- grep(endsWith(".tif"), dir("part6"), value =TRUE)
endsWith(rastersPath, ".tif")
endsWith(dir("part6"), ".tif", value =TRUE)
dir("part6")[endsWith(dir("part6"), ".tif",)]
dir("part6")[endsWith(dir("part6"), ".tif")]
setwd("H:\\fortCollinDev\\modelingShortCourse\\testdocs\\part6")
rastersPath <- dir()[endsWith(dir(), ".tif")]
rastersPath
r1 <- raster::raster(rastersPath[1])
r2 <- raster::raster(rastersPath[2])
r3 <- raster::raster(rastersPath[4])
r4 <- raster::raster(rastersPath[5])
extent <- raster::extent(r1)
extent
class(extent)
xmin <- extent@xmin/4
xmin
extent@xmin
xmin <- ceiling(extent@xmin/4)
xmax <- ceiling(extent@xmax/4)
ymin <- ceiling(extent@ymin/4)
ymax <- ceiling(extent@ymax/4)
bb <- matrix(c(xmin, xmin, xmax, xmax, xmin, ymin, ymax, ymax, ymin, ymin), ncol=2)
bgExt <- sp::SpatialPolygons(list(sp::Polygons(list(sp::Polygon(bb)), 1)))
bgExt
extent
xmax <- ceiling(extent@xmin((extent@xmin - extent@xmax)*0.25))
xmax <- ceiling(extent@xmin - ((extent@xmin - extent@xmax)*0.25))
xmax
ymax <- ceilingextent@ymin - ((extent@ymin - extent@ymax)*0.25)
ymax <- ceiling(extent@ymin - ((extent@ymin - extent@ymax)*0.25))
bb <- matrix(c(xmin, xmin, xmax, xmax, xmin, ymin, ymax, ymax, ymin, ymin), ncol=2)
bgExt <- sp::SpatialPolygons(list(sp::Polygons(list(sp::Polygon(bb)), 1)))
bgExt
bgExt@extent
bgExt@polygons
bgExt
plot(r1)
envsBgCrop <- raster::crop(r1, bgExt)
plot(envsBgCrop)
extent
xmax
bb
extent
print(xmin, xmax, ymin,ymax)
print(paste(xmin, xmax, ymin, ymax))
xmin <- extent@xmin
xmin
raster
extent <- raster::extent(r1)
extent
xmin <- extent@xmin
xmax <- ceiling(extent@xmin - ((extent@xmin - extent@xmax)*0.25))
ymin <- extent@ymin
ymax <- ceiling(extent@ymin - ((extent@ymin - extent@ymax)*0.25))
print(paste(xmin, xmax, ymin, ymax))
bb <- matrix(c(xmin, xmin, xmax, xmax, xmin, ymin, ymax, ymax, ymin, ymin), ncol=2)
bgExt <- sp::SpatialPolygons(list(sp::Polygons(list(sp::Polygon(bb)), 1)))
bgExt
plot(r1)
envsBgCrop <- raster::crop(r1, bgExt)
plot(envsBgCrop)
lapply(rasterList, raster::crop(bgExt))
clipRaster <- function(raster){
raster::crop(raster, bgExt)
}
clipRaster(R1)
clipRaster(r1)
lapply(rasterList, clipRaster)
rasterList <- c(r1,r2,r3,r4)
lapply(rasterList, clipRaster)
rastersPath
clippedRaser <- lapply(rasterList, clipRaster)
raster::writeRaster(clippedRaser[1], filename= rastersPath[1], datatype='INT4S', overwrite=TRUE)
clippedRaser
raster::writeRaster(clippedRaser[[1]], filename= rastersPath[1], datatype='INT4S', overwrite=TRUE)
raster::writeRaster(clippedRaser[[2]], filename= rastersPath[2], datatype='INT4S', overwrite=TRUE)
raster::writeRaster(clippedRaser[[3]], filename= rastersPath[4], datatype='INT4S', overwrite=TRUE)
raster::writeRaster(clippedRaser[[4]], filename= rastersPath[5], datatype='INT4S', overwrite=TRUE)
class(clippedRaser)
clippedRaser[1]
